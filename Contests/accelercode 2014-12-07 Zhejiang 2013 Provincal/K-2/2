/*************************************************************************
    > File Name: K.cpp
    > Author: VOID_133
    > ################### 
    > Mail: ################### 
    > Created Time: 2014年12月18日 星期四 10时50分08秒
 ************************************************************************/
#include<iostream>
#include<algorithm>
#include<cstdio>
#include<vector>
#include<cstring>
#include<map>
#include<queue>
#include<stack>
#include<string>
#include<cstdlib>
#include<ctime>
#include<set>
using namespace std;

typedef struct stu
{
	int votenum;
	int friendid;
	int ID;
	int candyneed;
}Stu;

bool cmp_candy(const Stu& a,const Stu& b)
{
	//if(a.candyneed!=b.candyneed)
	return a.candyneed<b.candyneed;
}

Stu student[110];
Stu tmp[110];

int main(void)
{
	int T;
	scanf("%d",&T);
	while(T--)
	{
		int N;	
		int maxvote=0;
		scanf("%d",&N);

		memset(student,0,sizeof(student));
		for(int i=1;i<=N;i++)
		{
			student[i].ID=i;
		}
		for(int i=2;i<=N;i++)
		{
			scanf("%d",&student[i].friendid);
			student[friendid].votenum++;
			if(maxvote<student[friendid].votenum) 
				maxvote=student[friendid].votenum;
		}
		for(int i=2;i<=N;i++)
		{
			scanf("%d",&student[i].candyneed);
		}

		//Init Complete
		int needvote=student[1].votenum;
		int mincandy=900000;
		//Enumeration	
		while(needvote<=maxvote)
		{
			int needtoget=needvote-student[1].votenum;
			int toget=0;
			bool fail=false;
			for(int i=2;i<=N && !fail;i++)
			{
				if(student[i].votenum>=needvote-1)
				{
					toget++;
					if(toget>needtoget) 
					{
						fail=true;
					}
				}
			}
			//Greedy
			if(!fail)
			{

			}
		}
	}	
}
